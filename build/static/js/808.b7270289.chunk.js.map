{"version":3,"file":"static/js/808.b7270289.chunk.js","mappings":"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","sources":["webpack://project8/./src/components/UI/LoadingSpinner.module.css?c5d9","components/UI/LoadingSpinner.js","hooks/use-http.js","lib/api.js","webpack://project8/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://project8/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://project8/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"spinner\":\"LoadingSpinner_spinner__ZSbA1\"};","import classes from './LoadingSpinner.module.css';\n\nconst LoadingSpinner = () => {\n  return <div className={classes.spinner}></div>;\n}\n\nexport default LoadingSpinner;\n","import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n\tif (action.type === 'SEND') {\n\t\treturn {\n\t\t\tdata: null,\n\t\t\terror: null,\n\t\t\tstatus: 'pending',\n\t\t};\n\t}\n\n\tif (action.type === 'SUCCESS') {\n\t\treturn {\n\t\t\tdata: action.responseData,\n\t\t\terror: null,\n\t\t\tstatus: 'completed',\n\t\t};\n\t}\n\n\tif (action.type === 'ERROR') {\n\t\treturn {\n\t\t\tdata: null,\n\t\t\terror: action.errorMessage,\n\t\t\tstatus: 'completed',\n\t\t};\n\t}\n\n\treturn state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n\tconst [httpState, dispatch] = useReducer(httpReducer, {\n\t\tstatus: startWithPending ? 'pending' : null,\n\t\tdata: null,\n\t\terror: null,\n\t});\n\n\tconst sendRequest = useCallback(\n\t\tasync function (requestData) {\n\t\t\tdispatch({ type: 'SEND' });\n\t\t\ttry {\n\t\t\t\tconst responseData = await requestFunction(requestData);\n\t\t\t\tdispatch({ type: 'SUCCESS', responseData });\n\t\t\t\tconsole.log(responseData);\n\t\t\t} catch (error) {\n\t\t\t\tdispatch({\n\t\t\t\t\ttype: 'ERROR',\n\t\t\t\t\terrorMessage: error.message || 'Something went wrong!',\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[requestFunction]\n\t);\n\n\treturn {\n\t\tsendRequest,\n\t\t...httpState,\n\t};\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-http-bc7c5-default-rtdb.firebaseio.com';\n\nexport async function getAllQuotes() {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not fetch quotes.');\n\t}\n\n\tconst transformedQuotes = [];\n\n\tfor (const key in data) {\n\t\tconst quoteObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedQuotes.push(quoteObj);\n\t}\n\n\treturn transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n\tconst data = await response.json();\n\tconsole.log(data);\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not fetch quote.');\n\t}\n\n\tconst loadedQuote = {\n\t\tid: quoteId,\n\t\t...data,\n\t};\n\n\treturn loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(quoteData),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t});\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not create quote.');\n\t}\n\n\treturn null;\n}\n\nexport async function addComment(requestData) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify(requestData.commentData),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t});\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not add comment.');\n\t}\n\n\treturn { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n\tconst response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n\tconst data = await response.json();\n\n\tif (!response.ok) {\n\t\tthrow new Error(data.message || 'Could not get comments.');\n\t}\n\n\tconst transformedComments = [];\n\n\tfor (const key in data) {\n\t\tconst commentObj = {\n\t\t\tid: key,\n\t\t\t...data[key],\n\t\t};\n\n\t\ttransformedComments.push(commentObj);\n\t}\n\n\treturn transformedComments;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__+C9Xv\"};","import { NavLink } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <NavLink to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </NavLink>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__3UgB6\",\"sorting\":\"QuoteList_sorting__FyBvG\"};","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n\treturn quotes.sort((quoteA, quoteB) => {\n\t\tif (ascending) {\n\t\t\treturn quoteA.id > quoteB.id ? 1 : -1;\n\t\t} else {\n\t\t\treturn quoteA.id < quoteB.id ? 1 : -1;\n\t\t}\n\t});\n};\n\nconst QuoteList = (props) => {\n\tconst history = useHistory();\n\tconst location = useLocation();\n\n\tconst queryParam = new URLSearchParams(location.search);\n\n\tconst isSortingAscending = queryParam.get('sort') === 'asc';\n\n\tconst sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n\tconst changeSortingHandler = () => {\n\t\thistory.push({\n\t\t\tpathname: location.pathname,\n\t\t\tsearch: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n\t\t});\n\t\t// history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={classes.sorting}>\n\t\t\t\t<button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n\t\t\t</div>\n\t\t\t<ul className={classes.list}>\n\t\t\t\t{sortedQuotes.map((quote) => (\n\t\t\t\t\t<QuoteItem\n\t\t\t\t\t\tkey={quote.id}\n\t\t\t\t\t\tid={quote.id}\n\t\t\t\t\t\tauthor={quote.author}\n\t\t\t\t\t\ttext={quote.text}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Fragment>\n\t);\n};\n\nexport default QuoteList;\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__0yKRM\"};","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes } from '../lib/api';\r\nimport NoQutesFound from '../components/quotes/NoQuotesFound';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst AllQuote = () => {\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data: loadedQuotes,\r\n        error\r\n    } = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (status === 'error') {\r\n        return <p className=\"centered focused\">{error}</p>;\r\n    }\r\n\r\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n        return (\r\n            <NoQutesFound />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <QuoteList quotes={loadedQuotes} />\r\n    );\r\n}\r\n\r\nexport default AllQuote;"],"names":["className","classes","httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","console","log","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","text","author","to","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","pathname","map","quote","useHttp","loadedQuotes","useEffect","LoadingSpinner","length"],"sourceRoot":""}